<?php

/**
 * @file
 * Enables search integration with Ting.
 */

/**
 * Implements hook_ctools_plugin_directory().
 *
 * It simply tells panels where to find the .inc files that define various
 * args, contexts, content_types.
 */
function ting_search_ctools_plugin_directory($module, $plugin) {
  if ($module == 'ctools' && !empty($plugin)) {
    return "plugins/$plugin";
  }
}

/**
 * Implement hook_ctools_plugin_api().
 */
function ting_search_ctools_plugin_api($module, $api) {
  if ($module == 'page_manager' && $api == 'pages_default') {
    return array('version' => 1);
  }
}
/**
 * Implements hook_menu_alter().
 *
 * Temporary hack to alter titles.
 */
function ting_search_menu_alter(&$items) {
  $items['search/node']['title'] = 'Hjemmeside';
  $items['search/node/%menu_tail']['title'] = 'Hjemmeside';
  $items['search/node/%menu_tail']['load arguments'] = array('%map', '%index');
  $items['search/ting']['title'] = 'Brønd';
  $items['search/ting/%menu_tail']['title'] = 'Brønd';
  $items['search/meta/%menu_tail']['load arguments'] = array('%map', '%index');
  $items['search/meta']['title'] = 'Universal Search';
  $items['search/meta/%menu_tail']['title'] = 'Universal Search';
  $items['search/meta/%menu_tail']['load arguments'] = array('%map', '%index');

}

/**
 * Implements hook_search_info().
 */
function ting_search_search_info() {
  return array(
    'title' => t('Ting'),
    'path' => 'ting',
    'conditions_callback' => 'ting_search_conditions_callback',
  );
}

/**
 * Implements hook_ding_facetbrowser().
 */
function ting_search_ding_facetbrowser() {
  $results             = new stdClass();
  $results->show_empty = FALSE;
  $search_result       = drupal_static('ting_search_results');
  if ($search_result) {
    $results->facets     = ($search_result instanceof TingClientSearchResult) ? $search_result->facets : array();
    $results->searchkey  = $search_result->search_key;
    return $results;
  }
}

/**
 * Implements hook_theme().
 */
function ting_search_theme() {
  return array(
    'ting_search_results' => array(
      'variables' => array('results' => NULL, 'module' => NULL),
      'file'      => 'ting_search.pages.inc',
      'template'  => 'ting-search-results',
    ),
    'ting_search_mini_pager' => array(
      'variables' => array('tags' => array(), 'element' => 0, 'parameters' => array(), 'quantity' => 9),
    ),
    'ting_search_pager' => array(
      'variables' => array('tags' => array(), 'element' => 0, 'parameters' => array(), 'quantity' => 9),
    ),
    'ting_search_display_extended_query' => array(
      'variables' => array('query_label'=>NULL,'query_string' => NULL),
      'template' => 'ting-search-display-extended-query',
    ),
    'ting_search_extended_search' => array(
      'template' => 'ting-search-extended-search',
    ),
    'ting_collection_teaser' => array(
      'variables' => array('object' => NULL),
      'template'  => 'templates/ting_collection_teaser',
    ),
  );
}

function ting_search_get_extended_actions() {
  return theme('ting_search_extended_search');
}

/**
 * @brief Implementation of hook_form_FORM_ID_alter() for form search_block_form.
 */
function ting_search_form_search_form_alter(&$form, &$form_state, $form_id) {
    $branches = array();
    try
    {
        if(function_exists('fbs_branches'))
        {
            $branches = fbs_branches();
            /*
             * Make it work for datawell..they dont use the same values.
             */
            $new_branches = array();
            foreach($branches as $key => $value)
            {
                $new_branches[$value] = $value;
            }
            $branches = $new_branches;
        }
    } catch (Exception $ex) {

    }

  $departments = module_invoke_all('oc_departments');
  $ting_well_data = array(
    'type' => array_merge(array('' => "Vælg en type"), drupal_map_assoc(array_keys(variable_get('ting_well_types', array())))),
    /*'type' => array(
      '' => "Søg i alle",
      'term.acsource=bibliotekskatalog AND (dk=sk OR dk=82* OR dk=83* OR dk=84* OR dk=85* OR dk=86* OR dk=87* OR dk=88.4* OR dk=88.6* OR dk=88.7* OR dk=88.8*) AND term.type=bog' => "Bøger (skønlitteratur)",
      'term.acsource=bibliotekskatalog NOT (dk=sk OR dk=82* OR dk=83* OR dk=84* OR dk=85* OR dk=86* OR dk=87* OR dk=88.4* OR dk=88.6* OR dk=88.7* OR dk=88.8*) AND term.type=bog' => "Bøger (faglitteratur)",
      'term.acsource any "pressreader rbdigital" OR (term.acsource=bibliotekskatalog AND ma=pe NOT ma=åp NOT ma=ms NOT ma=av NOT term.type=bog NOT term.type=spil NOT term.type=tegneserie NOT ma=tb NOT serie)' => "Tidsskrifter",
      'ma=xe AND term.type=ebog AND sp=dan' => "Ebøger (sprog: dansk)",
      'ma=xe AND term.type=ebog NOT sp=dan' => "Ebøger (andre sprog)",
      'ma=ly NOT (dk=78* OR em=sprog*)' => "Lydbøger",
      'term.acsource ANY "ebsco masterfile tidsskriftsartikler biography in context avisartikler store danske science in context litteratursiden historiens verden 1001 fortællinger forfatterweb faktalink"' => "Artikler",
      'term.acsource=filmstriben OR (term.acsource=bibliotekskatalog AND term.workType=movie NOT (term.type=bog OR term.type="film (net)" OR ma=xc))' => "Film/DVD/Bluray/VHS",
      '(ma=xc AND ma=lm) OR (ma=xc and ma=th) NOT (ma=mu OR ma=ly OR ma=xk OR dk=sk)' => "CD",
      'ma=mu' => "Noder",
      'ma=bg OR term.type=spil' => "Spil",
      'term.type=tegneserie OR term.type="graphic novel"' => "Tegneserier",
      ),*/
    'source' => array_merge(array('' => "Vælg en kilde"), drupal_map_assoc(array_keys(variable_get('ting_well_sources', array())))),
    'language' => array(
      '' => "Vælg et sprog",
      'arabisk' => "arabisk",
      'dansk' => "dansk",
      'engelsk' => "engelsk",
      'fransk' => "fransk",
      'italiensk' => "italiensk",
      'kalaallisut' => "kalaallisut",
      'kinesisk' => "kinesisk",
      'kroatisk' => "kroatisk",
      'kurdisk' => "kurdisk",
      'latin' => "latin",
      'norsk' => "norsk",
      'persisk' => "persisk",
      'polsk' => "polsk",
      'russisk' => "russisk",
      'serbisk' => "serbisk",
      'somalisk' => "somalisk",
      'spansk' => "spansk",
      'svensk' => "svensk",
      'tamilsk' => "tamilsk",
      'tyrkisk' => "tyrkisk",
      'tysk' => "tysk",
      'urdu' => "urdu",
      'vietnamesisk' => "vietnamesisk",
    ),
    'branch' =>  array_merge(array('' => t('Choose a branch')),$branches ),
    //Needs DDElibra trimning to limit values.
    'department' => array_merge(array('' => t('Choose a target')),$departments),
  );
  /*
      Fixing Search from branch id's to support danish special char's.
   *  ~oe = ø
      ~aa = å
   *  ~ae = æ
   *
  */
  $SpecialCharBranchArray = array();
  foreach($ting_well_data['branch'] as $key => $Branch)
  {
      $NewKey = str_replace('~oe','ø',$key);
      $NewKey = str_replace('~aa','å',$NewKey);
      $NewKey = str_replace('~ae','æ',$NewKey);
      $SpecialCharBranchArray[$NewKey] = $ting_well_data['branch'][$key];
  }
  if(sizeof($SpecialCharBranchArray) != 0)
  {
      $ting_well_data['branch'] = $SpecialCharBranchArray; //Replace with new array.
  }

  $advanced_fields = array(
    'term.title' => array(
      'key' => 'title',
      'title' => t('Title'),
      'description' => t('Enter title'),
      'type' => 'textfield',
    ),
    'term.type' => array(
      'key' => 'type',
      'title' => t('Materialetype'),
      'description' => t('Select type'),
      'type' => 'select',
      'options' => $ting_well_data['type'],
    ),
    'term.creator' => array(
      'key' => 'creator',
      'title' => t('Author'),
      'description' => t('Enter the author name'),
      'type' => 'textfield',
    ),
    'term.language' => array(
      'key' => 'language',
      'title' => t('Language'),
      'description' => t('Select language'),
      'type' => 'select',
      'options' => $ting_well_data['language'],
    ),
    'term.subject' => array(
      'key' => 'cql',
      'title' => t('Subject'),
      'description' => t('Enter subject keywords'),
      'type' => 'textfield',
    ),
    'term.creator' => array(
      'key' => 'creator',
      'title' => t('Author'),
      'description' => t('Enter the author name'),
      'type' => 'textfield',
    ),
    'term.subject' => array(
      'key' => 'subject',
      'title' => t('Subject'),
      'description' => t('Enter subject keywords'),
      'type' => 'textfield',
    ),
    'term.acSource' => array(
      'key' => 'source',
      'title' => t('Kilde'),
      'description' => t('Select source'),
      'type' => 'select',
      'options' => $ting_well_data['source'],
    ),
    'dkcclterm.dk' => array(
      'key' => 'dk5',

      'title' => t('dk5'),
      'description' => t('Enter dk5'),
      'type' => 'textfield',
    ),
    'holdingsitem.branch' => array(
      'key' => 'branch',
      //'index' => 'facet',
      'title' => t('Branch'),
      'description' => t('Branch'),
      'type' => 'select',
      'options' => $ting_well_data['branch'],
    ),
    'term.date' => array(
      'key' => 'date',
      'index' => 'facet',
      'title' => t('Year'),
      'description' => t('Year'),
      'type' => 'textfield',
    ),
    'facet.category' => array(
      'key' => 'category',
      'index' => 'facet',
      'title' => t('Target'),
      'description' => t('Target'),
      'type' => 'select',
      'options' => $ting_well_data['department'],
    ),
  );
  // We're going to disable advanced search in
  // the first version, and implement later on.
  // When implementing againg, set
  // $advanced = TRUE - just below
  // and re-enable asserts in testTingExtended() in ting_search.test.
  $advanced = TRUE;

  // Parse extended search query parameters.
  if (arg(0) == 'search') {
    $parts = explode('/', $_GET['q']);
    // Lose 'search' and the search type.
    array_shift($parts);
    $type = array_shift($parts);
    $search_query = implode('/', $parts);
    $indexes = ting_search_extract_keys($search_query, array_keys($advanced_fields));
    $search_query = $indexes['q'];
    unset($indexes['q']);
    if ($type != 'ting' and !empty($indexes)) {
      $search_query .= " " . implode(' ', $indexes);
      $indexes = array();
      $advanced = TRUE;
    }

    $form['basic']['keys']['#default_value'] = ShortenCqlQueries(array($search_query));
  }

  $form['sort'] = array(
    '#type' => 'hidden',
    '#default_value' => isset($_GET['sort']) ? check_plain($_GET['sort']) : FALSE,
    '#attributes' => array('id' => 'controls_search_sort'),
  );
  $form['size'] = array(
    '#type' => 'hidden',
    '#default_value' => isset($_GET['size']) ? (int)$_GET['size'] : FALSE,
    '#attributes' => array('id' => 'controls_search_size'),
  );

  // See line 127-130 - disable in the first version
  //$form['form_id']['#suffix'] = ting_search_get_extended_actions();

  if ($advanced) {
    $form['advanced'] = array(
      '#type' => 'fieldset',
      '#title' => t('Advanced search'),
      '#collapsible' => TRUE,
      '#collapsed' => TRUE,
      '#weight' => '101',
      '#class' => 'extendsearch-advanced',
      '#prefix' => '',
      '#suffix' => '',
      '#attached' => array(
        'css' => array(
          drupal_get_path('module', 'ting_search') . '/ting_search_extendform.css',
        ),
        'js' => array(
          drupal_get_path('module', 'ting_search') . '/ting_search_extendform.js',
        ),
      ),
    );
    if (!empty($indexes)) {
      $form['advanced']['#collapsed'] = FALSE;
    }

    $expand = FALSE;
    foreach ($advanced_fields as $name => $field) {
      if ($field['type'] == 'select') {
        $form['advanced'][$field['key']] = array(
          '#type' => $field['type'],
          '#options' => isset($field['options']) ? $field['options'] : '',
          '#title' => $field['title'],
          '#description' => $field['description'],
          '#default_value' => isset($indexes[$name]) ? $indexes[$name] : '',
        );
      } else {
        $form['advanced'][$field['key']] = array(
          '#type' => $field['type'],
          '#title' => $field['title'],
          '#size' => 30,
          '#maxlength' => 64,
          '#description' => $field['description'],
          '#default_value' => isset($indexes[$name]) ? $indexes[$name] : '',
        );
      }
    }
  }
  $form['#submit'] = array('ting_search_submit');

  // This submits the form to a blank page and prevents the search to be
  // executed twice. See http://platform.dandigbib.org/issues/372 for more
  // information.
  $path_parts = explode('/', drupal_get_path_alias($_GET['q']));
      /* @var $path_parts type */
      if (isset($path_parts[1]) && $path_parts[1] != 'node') {
        $form['#action'] = '?q=search-blank';
      }

  return $form;
}

/**
 * Extract special field keys from search string.
 *
 * @param string $search_query The search query.
 * @param array $keys Keys to extract.
 *
 * @return array Where the array keys are the search keys, and the remainder
 *   search string in 'q'.
 */
function ting_search_extract_keys($search_query, $keys) {
  $indexes = &drupal_static('ting_search_extract_indexes', array());

  ting_search_extract_indexes(NULL, $keys);
  $regexpes = array(
    //'/(^|\s+and\s+)\(([^)]+)\)$/i',
    '/(^|\s+and\s+)\(([^+]+)\)$/i',
  );
  foreach ($regexpes as $regexp) {
    $search_query = preg_replace_callback($regexp, 'ting_search_extract_indexes', $search_query);
  }

  $indexes['q'] = $search_query;
  return $indexes;
}

/**
 * preg_replace_callback function.
 */
function ting_search_extract_indexes($matches, $set_keys = NULL) {
  static $keys;
  if ($set_keys) {
    $keys = array_flip($set_keys);
  }
  $return = array();
  $subexps = preg_split('/\s+and\s+/i', $matches[2], NULL, PREG_SPLIT_NO_EMPTY);
  $indexes = &drupal_static(__FUNCTION__, array());
  foreach ($subexps as $subexp) {
    if ((preg_match('/^([^=]+)\=([^"]*)$/', $subexp, $rx) || preg_match('/^([^=]+)\="(.*)"$/', $subexp, $rx)) && array_key_exists(trim($rx[1]), $keys)) {
      $indexes[trim($rx[1])] = trim($rx[2]);
    }
    else {
      $return[] = $subexp;
    }
  }
  // Reappend unknown stuff.
  if (sizeof($return)) {
    return " and (" . implode(' and ', $return) . ")";
  }
  return "";
}

/**
 * Search conditions callback.
 */
function ting_search_conditions_callback($keys) {
  $conditions = array();

  if (!empty($_REQUEST['keys'])) {
    $conditions['keys'] = check_plain($_REQUEST['keys']);
  }

  if (!empty($_REQUEST['size'])) {
    $conditions['size'] = (int)$_REQUEST['size'];
  }


  if (!empty($_REQUEST['sort'])) {
    $conditions['sort'] = check_plain($_REQUEST['sort']);
  }

  // If facets is set, check if we have to remove any, if so,
  // reload the page.
  if (!empty($_REQUEST['facets'])) {
    $remove = array();
    $redirect = FALSE;
    foreach ($_REQUEST['facets'] as $key => $facet) {
      if (preg_match('/^-facet/', $facet)) {
        $remove[] = preg_replace('/^-/', '', $facet);
        $redirect = TRUE;
        unset($_REQUEST['facets'][$key]);
      }
    }

    foreach ($_REQUEST['facets'] as $key => $facet) {
      foreach ($remove as $rem) {
        if ($facet == $rem) {
          unset($_REQUEST['facets'][$key]);
          continue;
        }
      }
    }
    $conditions['facets'] = $_REQUEST['facets'];
    if ($redirect === TRUE) {
      $facets = array();
      foreach ($conditions['facets'] as $facet) {
        $facets['facets'][] =  $facet;
      }
      drupal_goto(rawurldecode($_GET['q']), array('query' => $facets));
    }
  }
  return $conditions;
}
/**
 * Checks if the searched value is isbn and makes sure it is valid formattet for
 * the data well. The ISBN can look like this:
 * 9788702113990 -> valid.
 * 978-87-02-11399-0 -> not valid.
 */
function ting_isbn_escape($SearchString)
{
    //check if length is long enough to be a possible isbn number.
    if(strlen($SearchString) >= 10)
    {
        $pos = strpos($SearchString, '-');
        if ($pos !== false) {
            $values = explode('-',$SearchString);
            $IsIsbn = true;
            foreach($values as $value)
            {
                if(!is_numeric($value))
                {
                    $IsIsbn = false;
                }
            }
            if($IsIsbn == true)
            {
                return str_replace('-','',$SearchString);
            }
            else
            {
                return $SearchString;
            }
        }
    }
    return $SearchString;
}
/**
 * Implements hook_search_execute().
 */
function ting_search_search_execute($keys = NULL, $conditions = NULL) {
  // TODO: Set sort options
  $options    = array();
  $results    = array();
  $facetArray = array();
  //Only set sorting , if user did not overwrite it himself already.
   if (!isset($conditions['sort']) && stripos($keys, 'term.language=') == TRUE) {
     $conditions['sort'] = "date_descending";
   }
   if ( !isset($conditions['sort']) && stripos($keys, 'term.type=dvd') == TRUE ||
           stripos($keys, 'term.type=dvd-rom') == TRUE)
   {
     $conditions['sort'] = "date_descending";
   }
   $query = oc_query_parser(ting_isbn_escape($keys));
   $options['numFacets'] = 25;
   module_load_include('client.inc', 'ting');
  // Extend query with selected facets
  if (isset($conditions['facets']) && $conditions['facets'] != NULL) {
    $facets = $conditions['facets'];
    foreach ($facets as $facet) {
      $facet = explode(':', $facet, 2);
      if ($facet[0]) {
        $facetArray[] = $facet[0] . '="' . rawurldecode($facet[1]) . '"';
      }
    }

    $query .= ' AND ' . implode(' AND ', $facetArray);
  }
  try {
    $page = pager_find_page();

    $resultsPerPage = variable_get('ting_search_results_per_page', 10);
    if (!empty($conditions['size'])) {
      $resultsPerPage = $conditions['size'];
    }

    if (!empty($conditions['sort'])) {
      $options['sort'] = $conditions['sort'];
    }
    $searchResult = ting_do_search($query, $page + 1, $resultsPerPage, $options);
    if (isset($searchResult->collections)) {
      $searchResult->search_key = $keys;

      // TODO: caching highes total_result know value of specific search
      //       at the moment we only know if there is one more page
      $total_results = ($page + 1) * $resultsPerPage + ($searchResult->more ? 1 : 0);
      pager_default_initialize($total_results, $resultsPerPage);

      foreach ($searchResult->collections as &$collection) {
        //$build = ting_collection_view($collection, 'teaser');
        $uri = entity_uri('ting_collection', $collection);
        $results[] = array(
          'link' => url($uri['path'], $uri['options']),
          'type' => '',
          'title' => $collection->title,
          'user' => '',
          'date' => '',
          'snippet' => theme('ting_collection_teaser',array('object' => $collection)),
        );
      }
    }
  }
  catch (TingClientException $e) {
    // TODO: Log the error.
    $results = array();
  }

  drupal_static('ting_search_results', $searchResult);

  return $results;
}
/*
 * OC Well3 CCL Query parser
 */
function oc_query_parser($q)
{
    //Dont apply logic to statements containing keyword as they are  system generated with namespaces included.
    //Also helps so if users for some reason type in namespaces it wont bug.
    //The parser will attempt to ensure that we follow the strict pattern.
    //
    $ExcludeList = array("term.","facet.","dkcclterm.","dkcclphrase.","phrase.","rec.","scanphrase.","scanterm.","holdingsitem.",
        "facet.","dkcclphrase.","bad>=","bad<=","bad=","bad&lt;=","bad&rt;=","bai=","bfi=","bur=","baf=","bmn=","bos=","bhs=","bdo=");

    //Split the query based on conditional keywords(AND,OR,NOT)
    $replace_tokens = array('AND','OR','NOT');
    $Split_String = preg_replace('/\([^()]*\)/',"",$q); // remove all paranthese wrapped statements.
    $Split_String = str_replace($replace_tokens, '#TOKEN#',$Split_String);
    $tokens = explode("#TOKEN#",$Split_String);
    $CCLtokens = InitCqlNamespaces();
    $FinalQuery = "";

    //Loop all tokens from the query.
    foreach($tokens as $index => $token)
    {
        //check if it is excluded from parsing and already contains the needed namespace information.
        $IsExcluded = false;
        foreach($ExcludeList as $exclude)
        {
            if(strpos($token,$exclude) !== false)
            {
                $IsExcluded = true;
                break;
            }
        }
        if($IsExcluded == true)
        {
            continue;
        }

        $cclfound = false;
        //if contains ccl dont double qoute else do it!
        foreach($CCLtokens as $namespace => $values)
        {
            foreach( $values as $ccl)
            {
                //If first entry there is no leading " " to check for. so possible accuracy is lowered on first item.
                if($index == 0)
                {
                    if(strpos(" ".$token," ".$ccl."=") !== false)
                    {
                       //Unpack the ccl for well service. eks: ti becomes namespace.ti
                       $q = str_replace($ccl ."=",$namespace.".".$ccl."=" , $q);
                       $cclfound = true;
                       continue;
                    }
                    if(strpos(" ".$token," ".$ccl."<") !== false)
                    {
                       //Unpack the ccl for well service. eks: ti becomes namespace.ti
                       $q = str_replace($ccl ."<",$namespace.".".$ccl."<" , $q);
                       $cclfound = true;
                       continue;
                    }
                    if(strpos(" ".$token," ".$ccl.">") !== false)
                    {
                       //Unpack the ccl for well service. eks: ti becomes namespace.ti
                       $q = str_replace($ccl .">",$namespace.".".$ccl.">" , $q);
                       $cclfound = true;
                       continue;
                    }
                    if(strpos(" ".$token," ".$ccl."<>") !== false)
                    {
                       //Unpack the ccl for well service. eks: ti becomes namespace.ti
                       $q = str_replace($ccl ."<>",$namespace.".".$ccl."<>" , $q);
                       $cclfound = true;
                       continue;
                    }
                }
                else
                {
                    //Here we used the prefixed whitespace to ensure we dont replace anything wrongly.
                    if(strpos($token," ".$ccl."=") !== false)
                    {
                       //Unpack the ccl for well service. eks: ti becomes namespace.ti
                       $q = str_replace(" ". $ccl ."="," ".$namespace.".".$ccl."=" , $q);
                       $cclfound = true;
                       continue;
                    }
                    if(strpos($token," ".$ccl."<") !== false)
                    {
                       //Unpack the ccl for well service. eks: ti becomes namespace.ti
                       $q = str_replace(" ". $ccl ."<"," ".$namespace.".".$ccl."<" , $q);
                       $cclfound = true;
                       continue;
                    }
                    if(strpos($token," ".$ccl.">") !== false)
                    {
                       //Unpack the ccl for well service. eks: ti becomes namespace.ti
                       $q = str_replace(" ". $ccl .">"," ".$namespace.".".$ccl.">" , $q);
                       $cclfound = true;
                       continue;
                    }
                    if(strpos($token," ".$ccl."<>") !== false)
                    {
                       //Unpack the ccl for well service. eks: ti becomes namespace.ti
                       $q = str_replace(" ". $ccl ."<>"," ".$namespace.".".$ccl."<>" , $q);
                       $cclfound = true;
                       continue;
                    }
                }
            }
        }
        if($cclfound == false && strlen($token)> 1)
        {
            //double qoute the free text search phrase
            if(substr_count($token,'"') < 2 && substr_count($token,'?') == 0 && substr_count($token,'*') == 0)
            {
                //Sometimes it removed a much needed space. so we ensure
                //there is enough whitespace always.
                $q = str_replace($token,' "'.$token.'" ' , $q);
            }
        }
    }
    return $q;
}
/*
 * Take ccl tokens and ensure the the argument is strict cql. ti=test should be ti="test"
 */
function oc_enforce_ccl_strict($ccl)
{

}
/**
 * Implements hook_search_page().
 */
function ting_search_search_page($results) {
  return array(
    '#theme' => 'ting_search_results',
    '#results' => $results,
    '#module' => 'ting_search',
  );
}

/**
 * Theme a pager
 */
function theme_ting_search_pager($variables) {
  $tags = $variables['tags'];
  $element = $variables['element'];
  $parameters = $variables['parameters'];
  $quantity = $variables['quantity'];
  $hide_list = isset($variables['hide_list']) ? $variables['hide_list'] : FALSE;
  global $pager_page_array, $pager_total;

  // Calculate various markers within this pager piece:
  // Middle is used to "center" pages around the current page.
  $pager_middle = ceil($quantity / 2);
  // current is the page we are currently paged to
  $pager_current = $pager_page_array[$element] + 1;
  // first is the first page listed by this pager piece (re quantity)
  $pager_first = $pager_current - $pager_middle + 1;
  // last is the last page listed by this pager piece (re quantity)
  $pager_last = $pager_current + $quantity - $pager_middle;
  // max is the maximum page number
  $pager_max = $pager_total[$element];
  // End of marker calculations.

  // Prepare for generation loop.
  $i = $pager_first;
  if ($pager_last > $pager_max) {
    // Adjust "center" if at end of query.
    $i = $i + ($pager_max - $pager_last);
    $pager_last = $pager_max;
  }
  if ($i <= 0) {
    // Adjust "center" if at start of query.
    $pager_last = $pager_last + (1 - $i);
    $i = 1;
  }
  // End of generation loop preparation.

  $li_previous = theme('pager_previous', array('text' => (isset($tags[1]) ? $tags[1] : t('‹ previous')), 'element' => $element, 'interval' => 1, 'parameters' => $parameters));

  if (empty($li_previous)) {
    $li_previous = "&nbsp;";
  }

  $li_first = theme('pager_first', array('text' => (isset($tags[0]) ? $tags[0] : t('« first')), 'element' => $element, 'parameters' => $parameters));

  if (empty($li_first)) {
    $li_first = "&nbsp;";
  }

  $li_next = theme('pager_next', array('text' => (isset($tags[3]) ? $tags[3] : t('next ›')), 'element' => $element, 'interval' => 1, 'parameters' => $parameters));
  if (empty($li_next)) {
    $li_next = "&nbsp;";
  }

  $li_last = theme('pager_last', array('text' => (isset($tags[4]) ? $tags[4] : t('last »')), 'element' => $element, 'parameters' => $parameters));

  if (empty($li_last)) {
    $li_last = "&nbsp;";
  }

  if ($pager_total[$element] > 1) {
    if ($pager_current > 2) {
      $items[] = array(
        'class' => array('pager-first'),
        'data' => $li_first,
      );
    }

    $items[] = array(
      'class' => array('pager-previous'),
      'data' => $li_previous,
    );

    // When there is more than one page, create the pager list.
    if (!$hide_list && $i != $pager_max) {
      if ($i > 1) {
        $items[] = array(
          'class' => array('pager-ellipsis'),
          'data' => '…',
        );
      }
      // Now generate the actual pager piece.
      for (; $i <= $pager_last && $i <= $pager_max; $i++) {
        if ($i < $pager_current) {
          $items[] = array(
            'class' => array('pager-item'),
            'data' => theme('pager_previous', array('text' => $i, 'element' => $element, 'interval' => ($pager_current - $i), 'parameters' => $parameters)),
          );
        }
        if ($i == $pager_current) {
          $items[] = array(
            'class' => array('pager-current'),
            'data' => $i,
          );
        }
        if ($i > $pager_current) {
          $items[] = array(
            'class' => array('pager-item'),
            'data' => theme('pager_next', array('text' => $i, 'element' => $element, 'interval' => ($i - $pager_current), 'parameters' => $parameters)),
          );
        }
      }
      if ($i < $pager_max) {
        $items[] = array(
          'class' => array('pager-ellipsis'),
          'data' => '…',
        );
      }
    }
    else {
      $items[] = array(
        'class' => array('pager-current'),
        'data' => $pager_current,
      );
    }

    $items[] = array(
      'class' => array('pager-next'),
      'data' => $li_next,
    );
    if ($pager_current + 1 < $pager_max && $li_last) {
      $items[] = array(
        'class' => array('pager-last'),
        'data' => $li_last,
      );
    }
    return theme('item_list', array('items' => $items, 'type' => 'ul', 'attributes' => array('class' => array('pager'))));
  }
}

/**
 * Theme a mini pager with only first, previous and next links.
 */
function theme_ting_search_mini_pager($variables) {
  $tags = $variables['tags'];
  $element = $variables['element'];
  $parameters = $variables['parameters'];
  $quantity = $variables['quantity'];
  global $pager_page_array, $pager_total;

  // Calculate various markers within this pager piece:
  // Middle is used to "center" pages around the current page.
  $pager_middle = ceil($quantity / 2);
  // current is the page we are currently paged to
  $pager_current = $pager_page_array[$element] + 1;
  // max is the maximum page number
  $pager_max = $pager_total[$element];
  // End of marker calculations.


  $li_previous = theme('pager_previous', array('text' => (isset($tags[1]) ? $tags[1] : t('‹ previous')), 'element' => $element, 'interval' => 1, 'parameters' => $parameters));

  if (empty($li_previous)) {
    $li_previous = "&nbsp;";
  }

  $li_first = theme('pager_first', array('text' => (isset($tags[0]) ? $tags[0] : t('« first')), 'element' => $element, 'parameters' => $parameters));

  if (empty($li_first)) {
    $li_first = "&nbsp;";
  }

  $li_next = theme('pager_next', array('text' => (isset($tags[3]) ? $tags[3] : t('next ›')), 'element' => $element, 'interval' => 1, 'parameters' => $parameters));
  if (empty($li_next)) {
    $li_next = "&nbsp;";
  }

  if ($pager_total[$element] > 1) {
    $items[] = array(
      'class' => array('pager-first'),
      'data' => $li_first,
    );

    $items[] = array(
      'class' => array('pager-previous'),
      'data' => $li_previous,
    );

    $items[] = array(
      'class' => array('pager-next'),
      'data' => $li_next,
    );
    return theme('item_list', array('items' => $items, 'type' => 'ul', 'attributes' => array('class' => array('pager'))));
  }
}


/**
 * Implements hook_block_info().
 */
function ting_search_block_info() {
  $blocks['sort-form'] = array(
      'info' => t('Ting search "sort by" form'),
      'cache' => DRUPAL_CACHE_PER_PAGE,
    );
  $blocks['records-per-page'] = array(
      'info' => t('Ting search "records per page"'),
      'cache' => DRUPAL_CACHE_PER_PAGE,
    );
  $blocks['search-display-extended-query'] = array(
      'info' => t('Ting search extended query display'),
      'cache' => DRUPAL_CACHE_PER_PAGE,
    );
  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function ting_search_block_view($delta = '') {
  $block = array();
  switch ($delta) {
    case 'sort-form':
      drupal_add_css(drupal_get_path('module', 'ting_search') . '/ting_search_extendform.css');
      drupal_add_js(drupal_get_path('module', 'ting_search') . '/ting_search_extendform.js');
      $block['subject'] = t('Ting search sort controls');
      $block['content'] = drupal_get_form('ting_search_sort_form');
      break;
    case 'records-per-page':
      drupal_add_css(drupal_get_path('module', 'ting_search') . '/ting_search_extendform.css');
      drupal_add_js(drupal_get_path('module', 'ting_search') . '/ting_search_extendform.js');
      $block['subject'] = t('Ting search records per page controls');
      $block['content'] = records_per_page_controls_content();
      break;
    case 'search-display-extended-query':
      drupal_add_css(drupal_get_path('module', 'ting_search') . '/ting_search_extendform.css');
      drupal_add_js(drupal_get_path('module', 'ting_search') . '/ting_search_extendform.js');
      $block['content'] = theme('ting_search_display_extended_query', array('query_label'=>t('Your query:'),'query_string'=>NULL));
      break;
  }
  return $block;

}

function search_extend_content() {
  return drupal_get_form('search_extend_form');
}

/**
 * Create form for sorting search result
 */
function ting_search_sort_form($form_state) {
  $form['sort'] = array(
    '#title' => t('Sort by:'),
    '#type' => 'select',
    '#default_value' => isset($_GET['sort']) ? check_plain($_GET['sort']) : '',
    '#options' => array(
      '' => t('Ranking'),
      'title_ascending' => t('Title (Ascending)'),
      'title_descending' => t('Title (Descending)'),
      'creator_ascending' => t('Creator (Ascending)'),
      'creator_descending' => t('Creator (Descending)'),
      'date_ascending' => t('Date (Ascending)'),
      'date_descending' => t('Date (Descending)')
    ),
    '#description' => t('Set sort order for search result'),
  );
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Sort'),
    '#states' => array(
      'visible' => array(':input[name="op"]' => array('value' => '', ), ),
    ),
  );
  return $form;
}

/**
 * Process submitted data for sorting order form
 */
function ting_search_sort_form_submit($form, &$form_state) {
  $query = drupal_get_query_parameters();

  if (isset($form_state['input']['sort'])) {
    $query = array('sort' => $form_state['input']['sort']) + $query;
  }

  $form_state['redirect'] = array($_GET['q'], array('query' => $query, ), );

}

/**
 * Create links for changing how many records per page
 */
function records_per_page_controls_content() {
  $sizes = array('10' => t('10'), '25' => t('25'), '50' => t('50'),);
  $size = array();
  $size['#type'] = 'markup';
  $size['#prefix'] = '<div id="ting-search-records-per-page">' . t('Results on page:');
  $size['#suffix'] = '</div>';
  $size['#markup'] = '';

  foreach ($sizes as $number => $text) {
    $pg = array('page' => isset($_GET['page']) ? $_GET['page']: 0);
    $sz = array('size' => $number);
    $classes = array();
    $keys = array_keys($sizes);

    if (isset($_GET['size']) && $_GET['size'] == $number) {
      $classes += array('selected');
    }
    elseif ((!isset($_GET['size']) ||
     !in_array($_GET['size'], $sizes)) &&
     $number == $keys[0]) {
      $classes += array('selected');
    }
    $size['#markup'] .= l($text, $_GET['q'], array('query' => $sz + $pg + drupal_get_query_parameters(), 'attributes' => array('class' => $classes, ), ));
  }

  return $size;
}

/**
 * Process a block search form submission.
 */
function ting_search_submit($form, &$form_state) {
  $controls = array();
  // The search form relies on control of the redirect destination for its
  // functionality, so we override any static destination set in the request,
  // for example by drupal_access_denied() or drupal_not_found()
  // (see http://drupal.org/node/292565).
  if (isset($_GET['destination'])) {
    unset($_GET['destination']);
  }

  $keys = $form_state['values']['keys'];
  //Escape paranteser men ikke allerede escapede \( \)
  $pattern = '/([^\\\\])(\(|\)|\[|\])/';
  $replacement = '$1\\\\$2';
 // $keys = preg_replace($pattern, $replacement, $keys);
  $fields = array();

  $extended_fields = array(
    'creator' => 'term.creator',
    'title' => 'term.title',
    'subject' => 'term.subject',
    'language' => 'term.language',
    'type' => '',
    'source' => 'term.acSource',
    'dk5' => 'dkcclterm.dk',
    'branch' => 'holdingsitem.branch',
    'category' => 'facet.category',
    'date' => 'term.date',
  );

  $extended_facet_fields = array(
    //'branch' => 'facets[]=facet.branch',
    'category' => 'facets[]=facet.category',
  );

  
  foreach ($extended_fields as $name => $index) {
    if (!empty($form_state['values'][$name])) {
      $value = $form_state['values'][$name];
      //$fields[] = $index . '=' . (strpos($value, ' ') ? '"' . $value . '"' : $value);
      $fields[] = $index  . (strpos($value, ' ') ?  $value : $value);
    }
  }
  
  $q = array();
  if (!empty($keys)) {
    $q[] = $keys;
    $q = $q;
  }

  if (!empty($fields)) {
    $q[] = '(' . implode(' AND ', $fields) . ')';
  }
  $q = join(' AND ', $q);

  // Extended facet fields.
  $f = $form_state['values']['category'];
  if ($f != "") {
    $controls['facets[]'] = 'facet.category:' . $f;
  }

  /*$f = $form_state['values']['department'];
  if ($f != "") {
    //$controls['facets[]'] = 'facet.department:' . $f;
  }*/
  // Controls.
  $s = $form_state['values']['sort'];
  if ( $s != "" ) {
    $controls['sort'] = $s;
  }

  $s = $form_state['values']['size'];
  if ( $s != "" ) {
    $controls['size'] = $s;
  }

  // Check to see if the form was submitted empty.
  // If it is empty, display an error message.
  // (This method is used instead of setting #required to TRUE for this field
  // because that results in a confusing error message.  It would say a plain
  // "field is required" because the search keywords field has no title.
  // The error message would also complain about a missing #title field.)
  if ($q == '') {
    $q  = "*";
    //form_set_error('keys', t('Please enter some keywords.'));
  }
  $search_info = array();
  $request_path = arg();

  if ($request_path[0] != 'search' || !isset($request_path[1])) {
    $search_info = search_get_default_module_info();
  }
  else {
    foreach (search_get_info() as $search_engine) {
      if ($search_engine['path'] == $request_path[1]) {
        $search_info = $search_engine;
        break;
      }
    }
    if (empty($search_info)) {
      $search_info = search_get_default_module_info();
    }
  }
  if (!empty($search_info['path']) && in_array($search_info['module'], variable_get('search_active_modules', array()))) {
    $form_state['redirect'] = FALSE;

    $url = 'search/' . $search_info['path']. '/' . trim($q);
    drupal_goto($url, array('query' => $controls));
  }
  else {
    form_set_error(NULL, t('Search is currently disabled.'), 'error');
  }
}
function ExpandCqlQueries($q)
{
    $namespaces = InitCqlNamespaces();
    for($i = 0; $i <= sizeof($q);$i++)
    {
       foreach($namespaces as $key => $value)
       {
           foreach($value as $cqlterm)
           {
               if(!isset($q[$i]))
               {
                   continue;
               }
               if(strpos($q[$i], $cqlterm ."=") !== FALSE && strpos($q[$i],$key.".".$cqlterm ."=") === FALSE)
               {
                   $q[$i] = str_replace($cqlterm ."=", $key.".".$cqlterm ."=" , $q[$i]);
               }
           }
       }

    }
    return $q;
}
function ShortenCqlQueries($q)
{
    $namespaces = InitCqlNamespaces();
    for($i = 0; $i <= sizeof($q);$i++)
    {
       foreach($namespaces as $key => $value)
       {
           foreach($value as $cqlterm)
           {
               if(!isset($q[$i]))
               {
                   continue;
               }
               if(strpos($q[$i], $key.".".$cqlterm ."=") !== FALSE)
               {
                   $q[$i] = str_replace($key.".".$cqlterm ."=",$cqlterm ."=" , $q[$i]);
               }
           }
       }

    }

    return $q;
}
function InitCqlNamespaces()
{
    //Check if already generated once , else reload.
    variable_set('Cqlterms',null);
    if(variable_get('Cqlterms') != null)
    {
        return variable_get('Cqlterms');
    }
    else
    {
        $namespaces = array();
        //$namespaces["dkcclphrase"] = array();
        $namespaces["dkcclterm"][] = "ac"; //using short hand might give problems ?
        $namespaces["dkcclterm"][] = "ag";
        $namespaces["dkcclterm"][] = "aj";
        $namespaces["dkcclterm"][] = "ar";
        $namespaces["dkcclterm"][] = "au";
        $namespaces["dkcclterm"][] = "bc";
        $namespaces["dkcclterm"][] = "br";
        $namespaces["dkcclterm"][] = "bs";
        $namespaces["dkcclterm"][] = "cl";
        $namespaces["dkcclterm"][] = "co";
        $namespaces["dkcclterm"][] = "cp";
        $namespaces["dkcclterm"][] = "db";
        $namespaces["dkcclterm"][] = "df";
        $namespaces["dkcclterm"][] = "dk";
        $namespaces["dkcclterm"][] = "ds";
        $namespaces["dkcclterm"][] = "ed";
        $namespaces["dkcclterm"][] = "ef";
        $namespaces["dkcclterm"][] = "ej";
        $namespaces["dkcclterm"][] = "ek";
        $namespaces["dkcclterm"][] = "em";
        $namespaces["dkcclterm"][] = "en";
        $namespaces["dkcclterm"][] = "ep";
        $namespaces["dkcclterm"][] = "es";
        $namespaces["dkcclterm"][] = "fb";
        $namespaces["dkcclterm"][] = "fg";
        $namespaces["dkcclterm"][] = "fl";
        $namespaces["dkcclterm"][] = "fm";
        $namespaces["dkcclterm"][] = "fo";
        $namespaces["dkcclterm"][] = "fv";
        $namespaces["dkcclterm"][] = "gd";
        $namespaces["dkcclterm"][] = "hm";
        $namespaces["dkcclterm"][] = "ht";
        $namespaces["dkcclterm"][] = "ib";
        $namespaces["dkcclterm"][] = "ic";
        $namespaces["dkcclterm"][] = "id";
        $namespaces["dkcclterm"][] = "im";
        $namespaces["dkcclterm"][] = "in";
        $namespaces["dkcclterm"][] = "ip";
        $namespaces["dkcclterm"][] = "ir";
        $namespaces["dkcclterm"][] = "is";
        $namespaces["dkcclterm"][] = "ix";
        $namespaces["dkcclterm"][] = "ka";
        $namespaces["dkcclterm"][] = "ke";
        $namespaces["dkcclterm"][] = "kg";
        $namespaces["dkcclterm"][] = "kk";
        $namespaces["dkcclterm"][] = "kl";
        $namespaces["dkcclterm"][] = "km";
        $namespaces["dkcclterm"][] = "kn";
        $namespaces["dkcclterm"][] = "ko";
        $namespaces["dkcclterm"][] = "kr";
        $namespaces["dkcclterm"][] = "kx";
        $namespaces["dkcclterm"][] = "ld";
        $namespaces["dkcclterm"][] = "li";
        $namespaces["dkcclterm"][] = "ll";
        $namespaces["dkcclterm"][] = "ln";
        $namespaces["dkcclterm"][] = "ma";
        $namespaces["dkcclterm"][] = "me";
        $namespaces["dkcclterm"][] = "mo";
        $namespaces["dkcclterm"][] = "ms";
        $namespaces["dkcclterm"][] = "nb";
        $namespaces["dkcclterm"][] = "nl";
        $namespaces["dkcclterm"][] = "nm";
        $namespaces["dkcclterm"][] = "no";
        $namespaces["dkcclterm"][] = "nr";
        $namespaces["dkcclterm"][] = "ns";
        $namespaces["dkcclterm"][] = "nt";
        $namespaces["dkcclterm"][] = "nv";
        $namespaces["dkcclterm"][] = "oc";
        $namespaces["dkcclterm"][] = "ok";
        $namespaces["dkcclterm"][] = "op";
        $namespaces["dkcclterm"][] = "ou";
        $namespaces["dkcclterm"][] = "pa";
        $namespaces["dkcclterm"][] = "pe";
        $namespaces["dkcclterm"][] = "po";
        $namespaces["dkcclterm"][] = "pu";
        $namespaces["dkcclterm"][] = "rt";
        $namespaces["dkcclterm"][] = "se";
        $namespaces["dkcclterm"][] = "sf";
        $namespaces["dkcclterm"][] = "so";
        $namespaces["dkcclterm"][] = "sp";
        $namespaces["dkcclterm"][] = "st";
        $namespaces["dkcclterm"][] = "tf";
        $namespaces["dkcclterm"][] = "tg";
        $namespaces["dkcclterm"][] = "ti";
        $namespaces["dkcclterm"][] = "ts";
        $namespaces["dkcclterm"][] = "tt";
        $namespaces["dkcclterm"][] = "uk";
        $namespaces["dkcclterm"][] = "ul";
        $namespaces["dkcclterm"][] = "ut";
        $namespaces["dkcclterm"][] = "uu";
        $namespaces["dkcclterm"][] = "vp";
        $namespaces["dkcclterm"][] = "ww";
        $namespaces["dkcclterm"][] = "år";

        $namespaces['dkcclphrase'][] = "bcm";
        $namespaces['dkcclphrase'][] = "dbk";
        $namespaces['dkcclphrase'][] = "ddc";
        $namespaces['dkcclphrase'][] = "lac";
        $namespaces['dkcclphrase'][] = "lag";
        $namespaces['dkcclphrase'][] = "lau";
        $namespaces['dkcclphrase'][] = "lbr";
        $namespaces['dkcclphrase'][] = "lcc";
        $namespaces['dkcclphrase'][] = "lcl";
        $namespaces['dkcclphrase'][] = "lcp";
        $namespaces['dkcclphrase'][] = "ldb";
        $namespaces['dkcclphrase'][] = "ldf";
        $namespaces['dkcclphrase'][] = "ldk";
        $namespaces['dkcclphrase'][] = "lds";
        $namespaces['dkcclphrase'][] = "led";
        $namespaces['dkcclphrase'][] = "lef";
        $namespaces['dkcclphrase'][] = "lek";
        $namespaces['dkcclphrase'][] = "lem";
        $namespaces['dkcclphrase'][] = "lep";
        $namespaces['dkcclphrase'][] = "les";
        $namespaces['dkcclphrase'][] = "lff";
        $namespaces['dkcclphrase'][] = "lfm";
        $namespaces['dkcclphrase'][] = "lfo";
        $namespaces['dkcclphrase'][] = "lgd";
        $namespaces['dkcclphrase'][] = "lht";
        $namespaces['dkcclphrase'][] = "lke";
        $namespaces['dkcclphrase'][] = "lkl";
        $namespaces['dkcclphrase'][] = "lkn";
        $namespaces['dkcclphrase'][] = "lko";
        $namespaces['dkcclphrase'][] = "lme";
        $namespaces['dkcclphrase'][] = "lmo";
        $namespaces['dkcclphrase'][] = "lms";
        $namespaces['dkcclphrase'][] = "lnb";
        $namespaces['dkcclphrase'][] = "lnt";
        $namespaces['dkcclphrase'][] = "lok";
        $namespaces['dkcclphrase'][] = "lpa";
        $namespaces['dkcclphrase'][] = "lpe";
        $namespaces['dkcclphrase'][] = "lpo";
        $namespaces['dkcclphrase'][] = "lrt";
        $namespaces['dkcclphrase'][] = "lse";
        $namespaces['dkcclphrase'][] = "lso";
        $namespaces['dkcclphrase'][] = "lst";
        $namespaces['dkcclphrase'][] = "lti";
        $namespaces['dkcclphrase'][] = "lts";
        $namespaces['dkcclphrase'][] = "ltt";
        $namespaces['dkcclphrase'][] = "luk";
        $namespaces['dkcclphrase'][] = "lut";
        $namespaces['dkcclphrase'][] = "lvp";
        $namespaces['dkcclphrase'][] = "lvx";
        $namespaces['dkcclphrase'][] = "mfo";
        $namespaces['dkcclphrase'][] = "mti";
        $namespaces['dkcclphrase'][] = "nal";
        $namespaces['dkcclphrase'][] = "nlm";
        $namespaces['dkcclphrase'][] = "udk";

        $namespaces["term"][] = "accessType";
        $namespaces["term"][] = "acSource";
        //$namespaces["term"][] = "acquisitionDate"; deprecated
        $namespaces["term"][] = "audience";
        $namespaces["term"][] = "audienceRecommended";
        $namespaces["term"][] = "audienceRestricted";
        $namespaces["term"][] = "category";
        $namespaces["term"][] = "creator";
        $namespaces["term"][] = "date";
        $namespaces["term"][] = "default";
        $namespaces["term"][] = "description";
        $namespaces["term"][] = "genre";
        $namespaces["term"][] = "identifier";
        $namespaces["term"][] = "isbn";
        $namespaces["term"][] = "language";
        $namespaces["term"][] = "literaryForm";
        $namespaces["term"][] = "mainCreator";
        $namespaces["term"][] = "mainTitle";
        $namespaces["term"][] = "nationality";
        $namespaces["term"][] = "onlineAccess";
        $namespaces["term"][] = "partOf";
        $namespaces["term"][] = "primaryLanguage";
        $namespaces["term"][] = "publisher";
        $namespaces["term"][] = "reviewedCreator";
        $namespaces["term"][] = "reviewedIdentifier";
        $namespaces["term"][] = "reviewedPublisher";
        $namespaces["term"][] = "reviewedTitle";
        $namespaces["term"][] = "reviewer";
        $namespaces["term"][] = "source";
        $namespaces["term"][] = "subject";
        $namespaces["term"][] = "type";
        $namespaces["term"][] = "title";
        $namespaces["term"][] = "trackTitle";
        $namespaces["term"][] = "typeCategory";

        $namespaces["holdingsitem"][] = "accessionDate";
        $namespaces["holdingsitem"][] = "agencyId";
        $namespaces["holdingsitem"][] = "branch";
        $namespaces["holdingsitem"][] = "circulationRule";
        $namespaces["holdingsitem"][] = "department";
        $namespaces["holdingsitem"][] = "itemId";
        $namespaces["holdingsitem"][] = "location";
        $namespaces["holdingsitem"][] = "status";
        $namespaces["holdingsitem"][] = "subLocation";

        $namespaces["phrase"][] = "titleSeries";
        $namespaces["phrase"][] = "creator";

        variable_set('Cqlterms', $namespaces);
        return $namespaces;
    }

}
/**
 * Attempt to quote reserved words in a search query.
 *
 * As proper quoting would require a full CQL parser, we cheat and
 * just work on the part we know is the free text part.
 *
 * Also, we don't mess with uppercase reserved words.
 */
function _ting_search_quote($string) {
  if (preg_match('/^(.*?)(AND \(.*|$)/', $string, $rx)) {
    $keys = $rx[1];
    $new_keys = preg_replace_callback('/(?:(".*?(?<!\\\)")|\b(and|or|not|prox)\b)/i', '_ting_search_quote_callback', $keys);
    $string = preg_replace('/^' . preg_quote($keys). '/', $new_keys, $string);
  }
  return $string;
}

/**
 *
 */
function _ting_search_quote_callback($matches) {
  // If $matches[2] is empty, it's because the quote pattern
  // matched. Don't do anything with it.
  if (!empty($matches[2])) {
    // Boolean operator, but not uppercase, quote it.
    if ($matches[2] != drupal_strtoupper($matches[2])) {
      return '"' . $matches[2] . '"';
    }
    // Uppercase boolean operator, return as is.
    return $matches[2];
  }
  // We have a quote. Just return it.
  return $matches[1];
}